[{"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/index.js":"1","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/App.js":"2","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/reportWebVitals.js":"3","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Routes.js":"4","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Navbar.js":"5","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/userContext.js":"6","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/api.js":"7","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/HomeGuest.js":"8","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/HomeUser.js":"9","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/SavedEvents.js":"10","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/NotFound.js":"11","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/AddArtistForm.js":"12","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Login.js":"13","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/SignupForm.js":"14","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Profile.js":"15","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/EventList.js":"16","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/ArtistItem.js":"17","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/UnauthorizedMessage.js":"18","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/GuestForm.js":"19"},{"size":588,"mtime":1652706691490,"results":"20","hashOfConfig":"21"},{"size":3593,"mtime":1653396616541,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1651097061562,"results":"23","hashOfConfig":"21"},{"size":1528,"mtime":1652713091090,"results":"24","hashOfConfig":"21"},{"size":1302,"mtime":1653400977484,"results":"25","hashOfConfig":"21"},{"size":99,"mtime":1652297633561,"results":"26","hashOfConfig":"21"},{"size":6229,"mtime":1653404950594,"results":"27","hashOfConfig":"21"},{"size":1348,"mtime":1653399718481,"results":"28","hashOfConfig":"21"},{"size":3306,"mtime":1653399108441,"results":"29","hashOfConfig":"21"},{"size":2881,"mtime":1653399075491,"results":"30","hashOfConfig":"21"},{"size":280,"mtime":1653399556291,"results":"31","hashOfConfig":"21"},{"size":3637,"mtime":1653399615621,"results":"32","hashOfConfig":"21"},{"size":2061,"mtime":1653402212394,"results":"33","hashOfConfig":"21"},{"size":7614,"mtime":1653402161634,"results":"34","hashOfConfig":"21"},{"size":10179,"mtime":1653399394941,"results":"35","hashOfConfig":"21"},{"size":3775,"mtime":1653327282454,"results":"36","hashOfConfig":"21"},{"size":439,"mtime":1653396410261,"results":"37","hashOfConfig":"21"},{"size":381,"mtime":1653399545721,"results":"38","hashOfConfig":"21"},{"size":6387,"mtime":1653399822631,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5cf8w0",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/index.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/App.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/reportWebVitals.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Routes.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Navbar.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/userContext.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/api.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/HomeGuest.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/HomeUser.js",["104"],[],"import React, {useContext, useEffect, useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport userContext from './userContext';\nimport { useNavigate } from 'react-router-dom';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nimport './Home.css';\nimport UnauthorizedMessage from './UnauthorizedMessage';\n\nfunction HomeUser( {logout} ) {\n    const {currUser, token, usersSavedArtists} = useContext(userContext);\n    const [city, setCity] = useState({});\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function getCityDetails() {\n            try{\n                const cityRes = await ArtistTrackerApi.getCityById(currUser.city);\n                setCity(cityRes.city);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        getCityDetails();\n    }, [])\n\n    function addArtist(evt) {\n        evt.preventDefault();\n        navigate('/addArtist');\n    }\n\n    function handleLogout(evt) {\n        evt.preventDefault();\n        logout();\n    }\n\n    if (!token) return <UnauthorizedMessage />\n    \n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row py-2\">\n                <p className=\"display-5\">Hi there, {currUser.firstName}!</p>\n            </div>\n            <div className=\"row py-3\">\n                <div className=\"col-10 \">\n                    <p className=\"h3 pb-1 mb-2\">Upcoming shows from your favorite artists:</p>\n                    <div className='Home-eventList'>\n                    {(usersSavedArtists.length)\n                        ? usersSavedArtists.map(a => {\n                            return <EventList key={a.artist.id} artistDetails={a.artist} cityInfo={city} radius={currUser.radius}/>;\n                        \n                        })\n                        : <p className='mt-5'>Save artists to automatically see upcoming shows!</p>\n                    }\n                    </div>\n                </div>\n                <div className=\"col-2 p-2 align-items-center\">\n                    <div className=\"row mb-3\">\n                        <Button variant=\"dark\" \n                                className=\"col-10 mt-5 mx-auto\"\n                                onClick={addArtist}>Add an artist</Button>\n                    </div>\n                    <div className=\"row mb-3\">\n                        <Button variant=\"dark\" href={`/events/${currUser.id}`}\n                                className=\"col-10 mx-auto\">\n                            My Saved Events\n                        </Button>\n                    </div>\n                    <div className=\"row mb-3 mt-5\">\n                        <Button variant=\"dark\" href={`/profile/${currUser.id}`}\n                                className=\"col-10 mx-auto\">\n                            Change my settings\n                        </Button>\n                    </div>\n                    <div className=\"row mb-3\">\n                        <Button variant=\"outline-dark\" \n                                onClick={handleLogout} \n                                className=\"col-10 mx-auto \">\n                            Log out\n                        </Button>\n                    </div>    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HomeUser;","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/SavedEvents.js",["105"],[],"import React, {useContext, useEffect, useState} from 'react';\nimport userContext from './userContext';\nimport UnauthorizedMessage from './UnauthorizedMessage';\nimport ArtistTrackerApi from './api';\nimport Button from 'react-bootstrap/Button';\n\nfunction SavedEvents() {\n    const {currUser, token} = useContext(userContext);\n    const [userEvents, setUserEvents] = useState([]);\n\n    useEffect(() => {\n        async function getSavedEvents() {\n            const res = await ArtistTrackerApi.getEventsForUser(currUser.id);\n            setUserEvents(res.events);\n        }\n        getSavedEvents();\n    }, [])\n\n    const remove = async (e) => {\n        const message = await ArtistTrackerApi.removeEventFromUser(currUser.id, e.id, token);\n        alert(message.deleteMessage);\n        const res = await ArtistTrackerApi.getEventsForUser(currUser.id);\n        setUserEvents(res.events);\n    }\n\n    if (!token) return <UnauthorizedMessage />;\n    if (!userEvents) return (\n        <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    )\n    return (\n        <div>\n            <p className=\"display-6 mt-4 mb-5\">Your Saved Events</p>\n            {(userEvents.length)\n                ? <table className='table text-light'>\n                    <thead>\n                        <tr className=\"text-dark\">\n                            <th>Artist</th>\n                            <th>Date</th>\n                            <th>Venue</th>\n                            <th>City</th>\n                            <th>State</th>\n                            <th></th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {userEvents.map(e => {\n                        return (<tr key={e.id}>\n                                    <td>{e.artist_name}</td>\n                                    <td>{new Date(e.event_date).toLocaleDateString()}</td>\n                                    <td>{e.venue}</td>\n                                    <td>{e.venue_city}</td>\n                                    <td>{e.venue_state}</td>\n                                    {currUser &&\n                                        <td><Button size=\"sm\" variant=\"dark\" \n                                                onClick={() => window.open(e.event_url,'_blank')}>Tickets</Button></td>\n                                    }\n                                    <td><button className=\"ArtistItem-button mt-1\" onClick={() => remove(e)}>X</button></td>\n                                </tr>)\n                    })\n                    }     \n                    </tbody>\n                </table>\n                : <p>NO SAVED EVENTS</p>\n            }\n            <Button variant=\"dark\" href=\"/\">Home</Button>\n        </div>\n    )\n}\n\nexport default SavedEvents;","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/NotFound.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/AddArtistForm.js",["106"],[],"import React, {useState, useCallback, useContext} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ArtistTrackerApi from './api';\nimport userContext from './userContext';\nimport './AddArtistForm.css'\n\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction AddArtistForm( {add} ) {\n    const [artistSearch, setArtistSearch] = useState(\"\");\n    const [autocompleteArtists, setAutocompleteArtists] = useState([]);\n    const [selectedArtist, setSelectedArtist] = useState({name:\"\"});\n    const [artistOptionsDisplay, setArtistOptionsDisplay] = useState(false);\n\n    const {currUser} = useContext(userContext);\n    const navigate = useNavigate();\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 800), []);\n\n    async function fetchArtists(str) {\n        try {\n            const res = await ArtistTrackerApi.getArtistsForAutocomplete(str);\n            setAutocompleteArtists(res.artists);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function updateUserArtists(evt) {\n        try {\n            if (!selectedArtist.id) alert('Please select an artist.')\n            else {add(selectedArtist.id, selectedArtist.name, currUser.id);\n            navigate('/');}\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const artistSearchChange = evt => {\n        setArtistSearch(evt.target.value);\n        if(artistSearch && artistSearch.length >= 3){\n            debounceLoadArtists(artistSearch);\n        }\n    }\n\n    const setArtistSelection = (artistSelection) => {\n        setArtistSearch(artistSelection.name);\n        setSelectedArtist(artistSelection);\n        setArtistOptionsDisplay(false);\n    }\n\n    return (\n        <div className='AddArtistForm container-fluid'>\n            <div>\n                <p className=\"display-5 mb-5 mt-4\">Add an artist to your account:</p>\n            </div>\n            <Form autoComplete='off'>\n                <Form.Group>\n                    <Form.Label>Artist name:</Form.Label>\n                    <Form.Control id='artistSearch' \n                                  type='text' \n                                  name='selectedArtist' \n                                  onClick={() => setArtistOptionsDisplay(true)}\n                                  onChange={artistSearchChange} \n                                  value={artistSearch} \n                                  required\n                                  className='artistSearch mb-3' />\n                    {artistOptionsDisplay && (\n                        <div className='AddArtist-autocompleteContainer ps-3 mt-1'>\n                            {autocompleteArtists.map(artist => {\n                                return (\n                                    <div className='autocompleteOption' \n                                        key={artist.id} \n                                        onClick={() => setArtistSelection(artist)}>\n                                        <span>{artist.name}</span>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                    )}\n                </Form.Group>\n                <Button variant='dark'\n                        className='mt-5'\n                        onClick={updateUserArtists}>Add this artist to my favorites!</Button>\n            </Form>\n            <a className='btn btn-outline-dark col col-2 mt-5 mx-auto' href='/'>Home</a>\n        </div>\n    )\n\n}\n\nexport default AddArtistForm;","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Login.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/SignupForm.js",["107"],[],"import React, {useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ArtistTrackerApi from './api';\nimport './SignupForm.css';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction SignupForm( {signup} ) {\n    const INITIAL_DATA = {\n        username: \"\",\n        password: \"\",\n        firstName: \"\",\n        email: \"\",\n        city: \"\",\n        radius: \"\"\n    }\n    const [formData, setFormData] = useState(INITIAL_DATA);\n    const [citySearch, setCitySearch] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n\n    const debounceLoadCities = useCallback(\n        debounce(str => fetchCities(str), 1200), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const citySearchChange = evt => {\n        setCitySearch(evt.target.value);\n        if(citySearch && citySearch.length >= 3){\n            debounceLoadCities(citySearch);\n        }\n    }\n\n    const setCitySelection = (citySelection) => {\n        setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setCityOptionsDisplay(false);\n    }\n\n    const handleChange = evt => {\n        const {name, value} = evt.target;\n        setFormData(data => { \n            return {...data, [name]: value}\n        });\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        const newUser = {\n                username:formData.username, \n                password:formData.password, \n                firstName:formData.firstName, \n                email:formData.email,\n                city:selectedCity.id,\n                radius: +formData.radius\n            }\n        signup(newUser);\n    }\n\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <div className=\"row py-2\">\n                    <p className=\"display-6\">Create an Account</p>\n                </div>\n            <div className=\"row mb-3 py-4\">\n                <div className=\"col-6 mx-auto\">\n                    <Form className=\"SignupForm\" onSubmit={handleSubmit} autoComplete='off'>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\" controlId=\"username\">\n                            <Form.Label column sm={2}>Username</Form.Label>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\"\n                                            name=\"username\"\n                                            value={formData.username}\n                                            onChange={handleChange} \n                                            required />\n                             </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\" controlId=\"password\">\n                            <Form.Label column sm={2}>Password</Form.Label>\n                            <Col sm={4}>\n                                <Form.Control type=\"password\"\n                                            name=\"password\" \n                                            value={formData.password}\n                                            onChange={handleChange}\n                                            required />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\" controlId=\"firstName\">\n                            <Form.Label column sm={2}>First Name</Form.Label>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\"\n                                            name=\"firstName\" \n                                            value={formData.firstName}\n                                            onChange={handleChange}\n                                            required />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\" controlId=\"formEmail\">\n                            <Form.Label column sm={2}>Email</Form.Label>\n                            <Col sm={4}>\n                                <Form.Control type=\"email\"\n                                            name=\"email\" \n                                            value={formData.email}\n                                            onChange={handleChange}\n                                            required />\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\">\n                            <Form.Label column sm={2}>City:</Form.Label>\n                            <Col sm={4}>\n                                <Form.Control id='citySearch' \n                                            type='text' \n                                            name='selectedCity' \n                                            onClick={() => setCityOptionsDisplay(true)}\n                                            onChange={citySearchChange} \n                                            value={citySearch} \n                                            className='citySearch'\n                                            required />\n                                {cityOptionsDisplay && (\n                                    <div className='autocompleteContainer ps-3 mt-1'>\n                                        {autocompleteCities.map(city => {\n                                            return (\n                                                <div className='autocompleteOption' \n                                                    key={city.id} \n                                                    onClick={() => setCitySelection(city)}>\n                                                    <span>{city.name}, {city.region}</span>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                )}\n                            </Col>\n                        </Form.Group>\n                        <Form.Group as={Row} className=\"mb-3 justify-content-center\" controlId=\"formDistance\">\n                            <Form.Label column sm={4}>Preferred search distance (miles)</Form.Label>\n                            <Col sm={2}>\n                                <Form.Control type=\"number\"\n                                            name=\"radius\" \n                                            value={formData.radius}\n                                            onChange={handleChange}\n                                            required />\n                            </Col>\n                        </Form.Group>\n                        <div className='row justify-content-center'>\n                            <Button className=\"col col-2\" type=\"submit\" variant=\"dark\">Submit</Button>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default SignupForm;","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/Profile.js",["108","109","110"],[],"import React, { useState, useContext, useEffect, useCallback} from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport userContext from './userContext';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport UnauthorizedMessage from './UnauthorizedMessage';\nimport ArtistTrackerApi from './api';\nimport './Profile.css';\nimport ArtistItem from './ArtistItem';\nconst _ = require('lodash');\nconst {debounce} = _;\n\n\nfunction Profile( {removeArtist, logout} ) {  \n    const {id} = useParams();\n    const {currUser, setCurrUser, token, usersSavedArtists, setUsersSavedArtists} = useContext(userContext);\n    const [formData, setFormData] = useState(\n                {username: currUser.username, firstName: currUser.firstName, \n                email: currUser.email, city: currUser.city, \n                radius: currUser.radius, password: ''}\n    );\n    const [citySearch, setCitySearch] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n    const [artists, setArtists] = useState(usersSavedArtists);\n\n    const navigate = useNavigate();\n\n    const debounceLoadCities = useCallback(\n        debounce(str => fetchCities(str), 1200), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    // change handler for city input\n    const citySearchChange = evt => {\n        setCitySearch(evt.target.value);\n        if(citySearch && citySearch.length >= 3){\n            debounceLoadCities(citySearch);\n        }\n    }\n\n    // runs when user selects a city from autocomplete\n    const setCitySelection = (citySelection) => {\n        setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setCityOptionsDisplay(false);\n    }\n\n    // get user's current city name, state when page loads (to show in form)\n    useEffect(() => {\n        async function getUserCityName() {\n            const res = await ArtistTrackerApi.getCityById(currUser.city);\n            setCitySearch(`${res.city.name}, ${res.city.region}`); \n            setSelectedCity(res.city);\n        }\n        getUserCityName();\n    }, [])\n\n    useEffect(() => {\n        setArtists(usersSavedArtists);\n    }, [usersSavedArtists])\n\n    function handleChange(evt) {\n        const {name, value} = evt.target;\n        setFormData(data => { \n            return {...data, [name]: value}\n        });\n    }\n\n    function addArtist(evt) {\n        evt.preventDefault();\n        navigate('/addArtist');\n    }\n\n    async function handleUpdate(evt) {\n\n        try {\n            evt.preventDefault();\n            const user = {id,\n                username: formData.username, \n                firstName: formData.firstName, \n                email: formData.email, \n                city: selectedCity.id, \n                radius: +formData.radius}\n            if (formData.password !== '') user.password = formData.password;\n\n          const updatedUser = await ArtistTrackerApi.updateUser(user, token);\n          setCurrUser(updatedUser);\n          navigate('/');\n          alert(`User updated successfully.`)\n        } catch(err) {\n          console.log(err);\n        }\n      }\n\n    async function deleteAccount(evt) {\n        evt.preventDefault();\n        if (window.confirm('Are you sure you want to delete your account?')) {\n            const res = await ArtistTrackerApi.deleteUserAccount(currUser.id, token);\n            if (res) alert('Account deleted. Thanks for playing!');\n            logout();\n        }\n    }\n\n    if (!token) return <UnauthorizedMessage />;\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row py-2\">\n                <p className='display-5'>{currUser.firstName}</p>\n            </div>\n            <div className=\"Profile-content row mb-3\">\n                <Form className=\"Profile-form col p-4 border border-dark\" autoComplete='off'>\n                    <h3 className=\"mb-4\">User Info</h3>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"username\">\n                        <Form.Label column sm={4}>Username</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"text\"\n                                        name=\"username\" \n                                        value={formData.username}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"password\">\n                        <Form.Label column sm={4}>Password</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"password\"\n                                        name=\"password\" \n                                        autoComplete='off'\n                                        value={formData.password}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"firstName\">\n                        <Form.Label column sm={4}>First Name</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"text\"\n                                        name=\"firstName\" \n                                        value={formData.firstName}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"email\">\n                        <Form.Label column sm={4}>Email</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"email\"\n                                        name=\"email\" \n                                        value={formData.email}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                            <Form.Label column sm={4}>City:</Form.Label>\n                            <Col sm={8}>\n                                <Form.Control id='citySearch' \n                                            type='text' \n                                            name='selectedCity' \n                                            onClick={() => setCityOptionsDisplay(true)}\n                                            onChange={citySearchChange} \n                                            value={citySearch}\n                                            className='citySearch'/>\n                                {cityOptionsDisplay && (\n                                    <div className='autocompleteContainer ps-3 mt-1'>\n                                        {autocompleteCities.map(city => {\n                                            return (\n                                                <div className='autocompleteOption' \n                                                    key={city.id} \n                                                    onClick={() => setCitySelection(city)}>\n                                                    <span>{city.name}, {city.region}</span>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                )}\n                            </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3 align-items-center\" controlId=\"distancePref\">\n                        <Form.Label column sm={4}>Event search radius (miles)</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"number\"\n                                        name=\"radius\" \n                                        value={formData.radius ?? \"\"}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\"\n                            className=\"border border-dark\" \n                            onChange={handleChange} \n                            onClick={handleUpdate}>\n                        Save changes\n                    </Button>\n                </Form>\n                <div className=\"col p-4 border border-dark\">\n                    <h3 className=\"mb-4\">Saved artists</h3>\n                    <div className='Profile-artists mb-2 p-3'>\n                        {(artists.length)\n                            ? artists.map(a => <div key={a.artist.id}><ArtistItem \n                                                                    artist={a.artist} \n                                                                    remove={removeArtist}/>\n                    </div>)\n                            : <p>NO ARTISTS SAVED</p>\n                        }\n                    </div>                 \n                    <Button variant=\"primary\" \n                            className=\"col-6 ms-auto border border-dark\"\n                            onClick={addArtist}>Add an artist</Button>                        \n                </div>\n            </div> \n            {/* ^ end content row */}\n            <div className=\"row\">\n                <Button variant=\"dark\" href=\"/\" className=\"Profile-homeBtn col-3 my-auto\">Back to my homepage</Button>\n                <Button variant=\"outline-dark\" \n                        size=\"sm\" \n                        className='col-1 ms-auto'\n                        onClick={deleteAccount}>Delete My Account</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile;","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/EventList.js",["111","112"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ArtistTrackerApi from './api';\nimport Button from 'react-bootstrap/Button';\nimport \"./EventList.css\";\nimport userContext from './userContext';\n\n/** Renders a list of events in table format for an artist.\n * \n *  If user is logged in, shows button to save an event to their account.\n */\n\nfunction EventList( {artistDetails, cityInfo, radius} ) {\n    const [events, setEvents] = useState(null);\n    const {currUser} = useContext(userContext);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (artistDetails && cityInfo.latitude) getEvents();\n    }, [])\n\n    async function getEvents() {\n        try {\n            const eventsRes = await ArtistTrackerApi.getEventsForArtist(\n                artistDetails.id, cityInfo.latitude, cityInfo.longitude, radius)\n            if (eventsRes) setEvents(eventsRes.events);\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    async function saveEvent(e) {\n        try {\n            const res = await ArtistTrackerApi.addEventToUser(e, currUser.id);\n            if (res) {\n                alert(`'${e.name}' added to your saved events!`);\n                navigate(`/events/${currUser.id}`);\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    if(!events) return <div className=\"spinner-border text-primary mt-3\" role=\"status\"></div>\n\n    return(\n        <div className=\"EventList container\">\n            <div className=\"card mb-3\">\n                <div className=\"card-body\">\n                    <img className=\"img-fluid\" src={artistDetails.image} alt=\"artist\" />\n                    <h5 className=\"card-title text-dark h1\">\n                        {(artistDetails.homepage !== '')\n                            ? <a href={artistDetails.homepage} target=\"_blank\">{artistDetails.name}</a>\n                            : artistDetails.name\n                        }\n                    </h5>\n                        \n                    {(events.length)\n                    ? <table className='table'>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Venue</th>\n                                <th>City</th>\n                                <th>State</th>\n                                <th></th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {events.map(e => {\n                            return (<tr key={e.id}>\n                                        <td>{new Date(e.datetime).toLocaleDateString()}</td>\n                                        <td>{e.venue}</td>\n                                        <td>{e.venueCity}</td>\n                                        <td>{e.venueState}</td>\n                                        {currUser &&\n                                            <td><Button size=\"sm\" onClick={() => saveEvent(e)}>Save</Button></td>\n                                        }\n                                        <td><Button size=\"sm\" \n                                                onClick={() => window.open(e.url,'_blank')}>Tickets</Button></td>\n                                    </tr>)\n                        })\n                        }     \n                        </tbody>\n                    </table>\n                    :\n                    <div className='text-dark'>NO EVENTS WITHIN SEARCH RADIUS</div>\n                    }\n                </div>\n                {/* end card body */}\n            </div>\n            {/* end card */}\n        </div> \n    )\n}\n\nexport default EventList;\n\n","/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/ArtistItem.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/UnauthorizedMessage.js",[],[],"/home/ells/Bootcamp/ArtistTracker-frontend/artist_tracker/src/GuestForm.js",["113","114"],[],"import React, {useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction GuestForm() {\n    const [citySearch, setCitySearch] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n\n    const [artistSearch, setArtistSearch] = useState(\"\");\n    const [autocompleteArtists, setAutocompleteArtists] = useState([]);\n    const [selectedArtist, setSelectedArtist] = useState({name:\"\"});\n    const [artistOptionsDisplay, setArtistOptionsDisplay] = useState(false);\n\n    const [radius, setRadius] = useState(null);\n    const [submitted, setSubmitted] = useState(false);\n\n    const debounceLoadCities = useCallback(\n                                debounce(str => fetchCities(str), 1200), []);\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 750), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function fetchArtists(str) {\n        try {\n            const res = await ArtistTrackerApi.getArtistsForAutocomplete(str);\n            setAutocompleteArtists(res.artists);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const artistSearchChange = evt => {\n        setArtistSearch(evt.target.value);\n        if(artistSearch && artistSearch.length >= 3){\n            debounceLoadArtists(artistSearch);\n        }\n    }\n\n    const citySearchChange = evt => {\n        setCitySearch(evt.target.value);\n        if(citySearch && citySearch.length >= 3){\n            debounceLoadCities(citySearch);\n        }\n    }\n\n    const radiusChange = evt => {\n        setRadius(evt.target.value);\n    }\n\n    const setCitySelection = (citySelection) => {\n        setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setCityOptionsDisplay(false);\n    }\n\n    const setArtistSelection = (artistSelection) => {\n        setArtistSearch(artistSelection.name);\n        setSelectedArtist(artistSelection);\n        setArtistOptionsDisplay(false);\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        if (selectedArtist.name !== \"\" && \n            selectedCity.id !== \"\" && \n            radius) setSubmitted(true);\n    }\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit} autoComplete='off'>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control id='artistSearch' \n                                type='text' \n                                name='selectedArtist' \n                                autoComplete='off'\n                                onClick={() => setArtistOptionsDisplay(true)}\n                                onChange={artistSearchChange} \n                                value={artistSearch} \n                                className='artistSearch'\n                                required />\n                    {artistOptionsDisplay && (\n                        <div className='GuestForm-autocompleteContainer ps-3 mt-1'>\n                            {autocompleteArtists.map(artist => {\n                                return (\n                                    <div className='autocompleteOption' \n                                        key={artist.id} \n                                        onClick={() => setArtistSelection(artist)}>\n                                        <span>{artist.name}</span>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                    )}\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Enter a city:</Form.Label>\n                    <Form.Control id='citySearch' \n                                  type='text' \n                                  name='selectedCity' \n                                  autoComplete='off'\n                                  onClick={() => setCityOptionsDisplay(true)}\n                                  onChange={citySearchChange} \n                                  value={citySearch} \n                                  className='citySearch'\n                                  required />\n                    {cityOptionsDisplay && (\n                        <div className='GuestForm-autocompleteContainer ps-3 mt-1'>\n                            {autocompleteCities.map(city => {\n                                return (\n                                    <div className='autocompleteOption' \n                                        key={city.id} \n                                        onClick={() => setCitySelection(city)}>\n                                        <span>{city.name}, {city.region}</span>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                    )}\n                </Form.Group>\n                <Form.Group className=\"GuestForm-radius mb-3\" controlId=\"radius\">\n                    <Form.Label>Search radius (miles)</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"radius\" \n                                  value={radius ?? \"\"} \n                                  onChange={radiusChange} \n                                  required />\n                </Form.Group>\n\n                <Button type=\"submit\" variant=\"dark\" className=\"mt-3\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList artistDetails={selectedArtist} cityInfo={selectedCity} radius={radius} />\n            <Button href=\"/\" variant=\"dark\" className=\"mt-2\">New Search</Button>\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n",{"ruleId":"115","severity":1,"message":"116","line":25,"column":8,"nodeType":"117","endLine":25,"endColumn":10,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":17,"column":8,"nodeType":"117","endLine":17,"endColumn":10,"suggestions":"120"},{"ruleId":"115","severity":1,"message":"121","line":21,"column":33,"nodeType":"122","endLine":21,"endColumn":44},{"ruleId":"115","severity":1,"message":"121","line":26,"column":32,"nodeType":"122","endLine":26,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":18,"column":61,"nodeType":"122","messageId":"125","endLine":18,"endColumn":81},{"ruleId":"115","severity":1,"message":"121","line":32,"column":32,"nodeType":"122","endLine":32,"endColumn":43},{"ruleId":"115","severity":1,"message":"116","line":67,"column":8,"nodeType":"117","endLine":67,"endColumn":10,"suggestions":"126"},{"ruleId":"115","severity":1,"message":"127","line":20,"column":8,"nodeType":"117","endLine":20,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":53,"column":31,"nodeType":"131","messageId":"132","endLine":53,"endColumn":80,"fix":"133"},{"ruleId":"115","severity":1,"message":"121","line":24,"column":32,"nodeType":"122","endLine":24,"endColumn":43},{"ruleId":"115","severity":1,"message":"121","line":27,"column":33,"nodeType":"122","endLine":27,"endColumn":44},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currUser.city'. Either include it or remove the dependency array.","ArrayExpression",["134"],"React Hook useEffect has a missing dependency: 'currUser.id'. Either include it or remove the dependency array.",["135"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'setUsersSavedArtists' is assigned a value but never used.","unusedVar",["136"],"React Hook useEffect has missing dependencies: 'artistDetails', 'cityInfo.latitude', and 'getEvents'. Either include them or remove the dependency array.",["137"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"138","text":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"140","fix":"144"},{"desc":"145","fix":"146"},[1892,1892]," rel=\"noreferrer\"","Update the dependencies array to be: [currUser.city]",{"range":"147","text":"148"},"Update the dependencies array to be: [currUser.id]",{"range":"149","text":"150"},{"range":"151","text":"148"},"Update the dependencies array to be: [artistDetails, cityInfo.latitude, getEvents]",{"range":"152","text":"153"},[857,859],"[currUser.city]",[603,605],"[currUser.id]",[2571,2573],[687,689],"[artistDetails, cityInfo.latitude, getEvents]"]