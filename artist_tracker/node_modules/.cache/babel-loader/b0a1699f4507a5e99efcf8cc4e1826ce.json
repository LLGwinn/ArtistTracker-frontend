{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction GuestForm() {\n  _s();\n\n  var _formData$artistName, _formData$city, _formData$distance;\n\n  const INITIAL_DATA = {\n    artistName: \"\",\n    city: \"\",\n    distance: \"\"\n  };\n  const [formData, setFormData] = useState([INITIAL_DATA]);\n  const [submitted, setSubmitted] = useState(false);\n  const [cities, setCities] = useState([]); // fetches cities for autocomplete\n\n  async function getCities(str) {\n    try {\n      const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n      const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n      const headers = {\n        'x-rapidapi-key': citiesAPI\n      };\n      const res = await axios.get(`${url}?namePrefix=${str}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`, {\n        headers\n      });\n      setCities(res.data.data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const handleChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setFormData(data => {\n      return { ...data,\n        [name]: value\n      };\n    });\n\n    if (formData.city && formData.city.length >= 4) {\n      getCities(formData.city);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const searchData = {\n      artistName: formData.artistName,\n      city: formData.city,\n      distance: formData.distance\n    };\n    setFormData(searchData);\n    setSubmitted(true);\n  }; // useEffect(() => {\n  //     // fetches cities for autocomplete\n  //     async function getCities(str) {\n  //         try {\n  //             const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n  //             const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n  //             const headers = { 'x-rapidapi-key':citiesAPI };\n  //             const res = await axios.get(\n  //                 `${url}?namePrefix=${str}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`,\n  //                 {headers}\n  //             )\n  //             setCities(res.data.data);\n  //         } catch(err) {\n  //             console.log(err);\n  //         }\n  //     }\n  //     if (formData.city && formData.city.length >= 4) {\n  //        getCities(formData.city);  \n  //     }\n  // }, [formData.city])\n\n\n  const selectArr = ['A', 'B', 'C'];\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formArtist\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"artistName\",\n          value: (_formData$artistName = formData.artistName) !== null && _formData$artistName !== void 0 ? _formData$artistName : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formCity\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Enter your city:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"city\",\n          value: (_formData$city = formData.city) !== null && _formData$city !== void 0 ? _formData$city : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"How far are you willing to travel to see this artist?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"distance\",\n          value: (_formData$distance = formData.distance) !== null && _formData$distance !== void 0 ? _formData$distance : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        \"aria-label\": \"Default select example\",\n        children: cities.map(el => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: el,\n            children: [el.name, \", \", el.region]\n          }, el.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      data: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"9hFYWSRUnQL8nMR+CO6gtTndsEQ=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","Form","Button","EventList","axios","require","GuestForm","INITIAL_DATA","artistName","city","distance","formData","setFormData","submitted","setSubmitted","cities","setCities","getCities","str","citiesAPI","url","headers","res","get","data","err","console","log","handleChange","evt","name","value","target","length","handleSubmit","preventDefault","searchData","selectArr","map","el","region","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nconst axios = require ('axios');\n\nfunction GuestForm() {\n    const INITIAL_DATA = {artistName:\"\", city:\"\", distance:\"\"};\n    const [formData, setFormData] = useState([INITIAL_DATA]);\n    const [submitted, setSubmitted] = useState(false);\n    const [cities, setCities] = useState([]);\n\n    // fetches cities for autocomplete\n    async function getCities(str) {\n        try {\n            const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n            const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n            const headers = { 'x-rapidapi-key':citiesAPI };\n\n            const res = await axios.get(\n                `${url}?namePrefix=${str}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`,\n                {headers}\n            )\n            setCities(res.data.data);\n        } catch(err) {\n            console.log(err);\n        }\n    }\n            \n\n    const handleChange = evt => {\n        const {name, value} = evt.target;\n        setFormData(data => { \n            return {...data, [name]: value}\n        });\n        if (formData.city && formData.city.length >= 4) {\n            getCities(formData.city);  \n         }\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        const searchData = {artistName: formData.artistName,\n                        city: formData.city,\n                        distance: formData.distance}\n        setFormData(searchData);\n        setSubmitted(true);\n    }\n\n    // useEffect(() => {\n    //     // fetches cities for autocomplete\n    //     async function getCities(str) {\n    //         try {\n    //             const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n    //             const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n    //             const headers = { 'x-rapidapi-key':citiesAPI };\n\n    //             const res = await axios.get(\n    //                 `${url}?namePrefix=${str}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`,\n    //                 {headers}\n    //             )\n    //             setCities(res.data.data);\n    //         } catch(err) {\n    //             console.log(err);\n    //         }\n    //     }\n            \n    //     if (formData.city && formData.city.length >= 4) {\n    //        getCities(formData.city);  \n    //     }\n    // }, [formData.city])\n\n    const selectArr = ['A', 'B', 'C'];\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formArtist\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"artistName\" \n                                  value={formData.artistName ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formCity\">\n                    <Form.Label>Enter your city:</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"city\" \n                                  value={formData.city ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>How far are you willing to travel to see this artist?</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"distance\" \n                                  value={formData.distance ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Select aria-label=\"Default select example\">\n                    {cities.map (el => {\n                        return <option key={el.id} value={el}>{el.name}, {el.region}</option>\n                    })}\n\n                </Form.Select>\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList data={formData} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}