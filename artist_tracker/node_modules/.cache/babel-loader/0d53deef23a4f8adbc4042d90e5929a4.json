{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction GuestForm() {\n  _s();\n\n  var _formData$artistName, _formData$city, _formData$distance;\n\n  const INITIAL_DATA = {\n    artistName: \"\",\n    city: \"\",\n    distance: \"\"\n  };\n  const [formData, setFormData] = useState([INITIAL_DATA]);\n  const [submitted, setSubmitted] = useState(false);\n  const [cities, setCities] = useState([]);\n\n  const handleChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setFormData(data => {\n      return { ...data,\n        [name]: value\n      };\n    });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const searchData = {\n      artistName: formData.artistName,\n      city: formData.city,\n      distance: formData.distance\n    };\n    setFormData(searchData);\n    setSubmitted(true);\n  };\n\n  useEffect(() => {\n    async function getCities(str) {\n      try {\n        const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n        const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n        const headers = {\n          'x-rapidapi-key': citiesAPI\n        };\n        const params = {\n          namePrefix: str,\n          sort: \"-population\",\n          minPopulation: 20000,\n          countryIds: \"US\",\n          apiKey: citiesAPI\n        }; // const res = await axios.get(\n        //     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=${formData.city}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`,\n        //     headers\n        // )\n\n        const res = await axios.get(url, {\n          params\n        }, headers);\n        console.log('res.data.data:', res.data.data);\n        setCities(res.data.data);\n        console.log('CITIES in state', cities, typeof cities);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (formData.city && formData.city.length >= 4) {\n      console.log('formData.city', formData.city);\n      getCities(formData.city);\n    }\n  }, [formData.city]);\n  const selectArr = ['A', 'B', 'C'];\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formArtist\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"artistName\",\n          value: (_formData$artistName = formData.artistName) !== null && _formData$artistName !== void 0 ? _formData$artistName : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formCity\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Enter your city:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"city\",\n          value: (_formData$city = formData.city) !== null && _formData$city !== void 0 ? _formData$city : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"How far are you willing to travel to see this artist?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"distance\",\n          value: (_formData$distance = formData.distance) !== null && _formData$distance !== void 0 ? _formData$distance : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        \"aria-label\": \"Default select example\",\n        children: cities.map(el => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: el,\n            children: [el.name, \", \", el.region]\n          }, el.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      data: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"WeX13fepz9emEUShWCLX+dSIjDw=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","Form","Button","EventList","axios","require","GuestForm","INITIAL_DATA","artistName","city","distance","formData","setFormData","submitted","setSubmitted","cities","setCities","handleChange","evt","name","value","target","data","handleSubmit","preventDefault","searchData","getCities","str","citiesAPI","url","headers","params","namePrefix","sort","minPopulation","countryIds","apiKey","res","get","console","log","err","length","selectArr","map","el","region","id"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nconst axios = require ('axios');\n\nfunction GuestForm() {\n    const INITIAL_DATA = {artistName:\"\", city:\"\", distance:\"\"};\n    const [formData, setFormData] = useState([INITIAL_DATA]);\n    const [submitted, setSubmitted] = useState(false);\n    const [cities, setCities] = useState([]);\n\n    const handleChange = evt => {\n        const {name, value} = evt.target;\n        setFormData(data => { \n            return {...data, [name]: value}\n        });\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        const searchData = {artistName: formData.artistName,\n                        city: formData.city,\n                        distance: formData.distance}\n        setFormData(searchData);\n        setSubmitted(true);\n    }\n\n    useEffect(() => {\n        async function getCities(str) {\n            try {\n                const citiesAPI = '853b9f4f9cmsh8a4230f74741b00p1a6d06jsn97aeefa48514';\n                const url = 'https://wft-geo-db.p.rapidapi.com/v1/geo/cities';\n                const headers = { 'x-rapidapi-key':citiesAPI };\n                const params = {namePrefix: str,\n                                        sort:\"-population\",\n                                        minPopulation:20000,\n                                        countryIds:\"US\",\n                                        apiKey:citiesAPI\n                                }\n                // const res = await axios.get(\n                //     `https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=${formData.city}&sort=-population&minPopulation=20000&apiKey=${citiesAPI}&countryIds=US`,\n                //     headers\n                // )\n                const res = await axios.get(\n                    url, {params}, headers\n                )\n\n                console.log('res.data.data:', res.data.data)\n                setCities(res.data.data);\n                console.log('CITIES in state', cities, typeof cities)\n            } catch(err) {\n                console.log(err);\n            }\n        }\n        if (formData.city && formData.city.length >= 4) {\n            console.log('formData.city', formData.city)\n            getCities(formData.city);\n        }\n    }, [formData.city])\n\n    const selectArr = ['A', 'B', 'C'];\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formArtist\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"artistName\" \n                                  value={formData.artistName ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formCity\">\n                    <Form.Label>Enter your city:</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"city\" \n                                  value={formData.city ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>How far are you willing to travel to see this artist?</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"distance\" \n                                  value={formData.distance ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                <Form.Select aria-label=\"Default select example\">\n                    {cities.map (el => {\n                        return <option key={el.id} value={el}>{el.name}, {el.region}</option>\n                    })}\n\n                </Form.Select>\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList data={formData} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}