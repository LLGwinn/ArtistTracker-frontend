{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst _ = require('lodash');\n\nconst {\n  debounce\n} = _;\n\nfunction GuestForm() {\n  _s();\n\n  const [submitted, setSubmitted] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState({\n    id: \"\",\n    name: \"\",\n    region: \"\"\n  });\n  const [selectedArtist, setSelectedArtist] = useState(null);\n  const [radius, setRadius] = useState(null);\n  const [optionsDisplay, setOptionsDisplay] = useState(false);\n  const debounceLoadCities = useCallback(debounce(str => fetchCities(str), 1000), []);\n  const debounceLoadArtists = useCallback(debounce(str => fetchArtists(str), 1000), []);\n\n  async function fetchCities(str) {\n    try {\n      const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n      setAutocompleteCities(res.cities);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function fetchArtists(str) {\n    try {\n      console.log('fetchArtists function running');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const artistSearchChange = evt => {\n    setSearchText(evt.target.value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadArtists(searchText);\n    }\n  };\n\n  const citySearchChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setSearchText(value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadCities(searchText);\n    }\n  };\n\n  const radiusChange = evt => {\n    setRadius(evt.target.value);\n  };\n\n  const setCitySelection = citySelection => {\n    setSearchText(`${citySelection.name}, ${citySelection.region}`);\n    setSelectedCity(citySelection);\n    setOptionsDisplay(false);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSubmitted(true);\n  };\n\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formArtist\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"selectedArtist\",\n          value: selectedArtist !== null && selectedArtist !== void 0 ? selectedArtist : \"\",\n          onChange: artistSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"citySearch\",\n        type: \"text\",\n        name: \"selectedCity\",\n        onClick: () => setOptionsDisplay(!optionsDisplay),\n        onChange: citySearchChange,\n        value: searchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), optionsDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocompleteContainer\",\n        children: autocompleteCities.map(city => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autocompleteOption\",\n            onClick: () => setCitySelection(city),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [city.name, \", \", city.region]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this)\n          }, city.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Search radius\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"radius\",\n          value: radius !== null && radius !== void 0 ? radius : \"\",\n          onChange: radiusChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      artistInfo: selectedArtist,\n      cityInfo: selectedCity,\n      radius: radius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"ecFfEGuAkjA1SHMGl5a2IfM5eY8=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","useCallback","Form","Button","EventList","ArtistTrackerApi","_","require","debounce","GuestForm","submitted","setSubmitted","searchText","setSearchText","autocompleteCities","setAutocompleteCities","selectedCity","setSelectedCity","id","name","region","selectedArtist","setSelectedArtist","radius","setRadius","optionsDisplay","setOptionsDisplay","debounceLoadCities","str","fetchCities","debounceLoadArtists","fetchArtists","res","getCitiesForAutocomplete","cities","err","console","log","artistSearchChange","evt","target","value","length","citySearchChange","radiusChange","setCitySelection","citySelection","handleSubmit","preventDefault","map","city"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction GuestForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [selectedArtist, setSelectedArtist] = useState(null);\n    const [radius, setRadius] = useState(null);\n    const [optionsDisplay, setOptionsDisplay] = useState(false);\n\n    const debounceLoadCities = useCallback(\n                                debounce(str => fetchCities(str), 1000), []);\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 1000), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function fetchArtists(str) {\n        try {\n            console.log('fetchArtists function running')\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const artistSearchChange = evt => {\n        setSearchText(evt.target.value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadArtists(searchText);\n        }\n    }\n\n    const citySearchChange = evt => {\n        const {name, value} = evt.target;\n        setSearchText(value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadCities(searchText);\n        }\n    }\n\n    const radiusChange = evt => {\n        setRadius(evt.target.value);\n    }\n\n    const setCitySelection = (citySelection) => {\n        setSearchText(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setOptionsDisplay(false);\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        setSubmitted(true);\n    }\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formArtist\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"selectedArtist\" \n                                  value={selectedArtist ?? \"\"} \n                                  onChange={artistSearchChange} />\n                </Form.Group>\n                {/* <Form.Group className=\"mb-3\" controlId=\"formSearchText\">\n                    <Form.Label>Enter your city:</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"searchText\" \n                                  value={searchText ?? \"\"} \n                                  onChange={handleSearchTextChange} />\n                </Form.Group>\n                <Form.Select className=\"mb-3\" name=\"city\" value={formData.city} onChange={updateFormCity}>\n                    {cities.map (el => {\n                        return <option key={el.id} value={el.id}>{el.name}, {el.region}</option>\n                    })}\n                </Form.Select> */}\n                <input id='citySearch' \n                       type='text' \n                       name='selectedCity' \n                       onClick={() => setOptionsDisplay(!optionsDisplay)}\n                       onChange={citySearchChange} \n                       value={searchText} />\n                {optionsDisplay && (\n                    <div className='autocompleteContainer'>\n                        {autocompleteCities.map(city => {\n                            return (\n                                <div className='autocompleteOption' \n                                     key={city.id} \n                                     onClick={() => setCitySelection(city)}>\n                                    <span>{city.name}, {city.region}</span>\n                                </div>\n                            )\n                        })}\n\n                    </div>\n                )}\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>Search radius</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"radius\" \n                                  value={radius ?? \"\"} \n                                  onChange={radiusChange} />\n                </Form.Group>\n\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList artistInfo={selectedArtist} cityInfo={selectedCity} radius={radius} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}