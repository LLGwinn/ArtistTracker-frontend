{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst _ = require('lodash');\n\nconst {\n  debounce\n} = _;\n\nfunction GuestForm() {\n  _s();\n\n  var _formData$artistName, _formData$distance;\n\n  const [submitted, setSubmitted] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState({});\n  const [selectedArtist, setSelectedArtist] = useState({});\n  const [radius, setRadius] = useState(50);\n  const debounceLoadCities = useCallback(debounce(str => fetchCities(str), 1000), []);\n  const debounceLoadArtists = useCallback(debounce(str => fetchArtists(str), 1000), []);\n\n  async function fetchCities(str) {\n    try {\n      const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n      setAutocompleteCities(res.cities);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function fetchArtists(str) {\n    try {\n      console.log('fetchArtists function running');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const artistSearchChange = evt => {\n    setSearchText(evt.target.value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadArtists(searchText);\n    }\n  };\n\n  const citySearchTextChange = evt => {\n    setSearchText(evt.target.value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadCities(searchText);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSubmitted(true);\n  };\n\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formArtist\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"artistName\",\n          value: (_formData$artistName = formData.artistName) !== null && _formData$artistName !== void 0 ? _formData$artistName : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        list: \"citiesSearch\",\n        type: \"text\",\n        name: \"city\",\n        onChange: handleSearchTextChange,\n        value: searchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"citiesSearch\",\n        children: cities.map(el => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: el.id,\n            children: [el.name, \", \", el.region]\n          }, el.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"How far are you willing to travel to see this artist?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"distance\",\n          value: (_formData$distance = formData.distance) !== null && _formData$distance !== void 0 ? _formData$distance : \"\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      data: formData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"zvcgQICjmtX1o1u/sZhPfpXz4JY=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","useCallback","Form","Button","EventList","ArtistTrackerApi","_","require","debounce","GuestForm","submitted","setSubmitted","searchText","setSearchText","autocompleteCities","setAutocompleteCities","selectedCity","setSelectedCity","selectedArtist","setSelectedArtist","radius","setRadius","debounceLoadCities","str","fetchCities","debounceLoadArtists","fetchArtists","res","getCitiesForAutocomplete","cities","err","console","log","artistSearchChange","evt","target","value","length","citySearchTextChange","handleSubmit","preventDefault","formData","artistName","handleChange","handleSearchTextChange","map","el","id","name","region","distance"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction GuestForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({});\n    const [selectedArtist, setSelectedArtist] = useState({});\n    const [radius, setRadius] = useState(50);\n\n    const debounceLoadCities = useCallback(\n                                debounce(str => fetchCities(str), 1000), []);\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 1000), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function fetchArtists(str) {\n        try {\n            console.log('fetchArtists function running')\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const artistSearchChange = evt => {\n        setSearchText(evt.target.value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadArtists(searchText);\n        }\n    }\n\n    const citySearchTextChange = evt => {\n        setSearchText(evt.target.value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadCities(searchText);\n        }\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        setSubmitted(true);\n    }\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formArtist\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"artistName\" \n                                  value={formData.artistName ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n                {/* <Form.Group className=\"mb-3\" controlId=\"formSearchText\">\n                    <Form.Label>Enter your city:</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"searchText\" \n                                  value={searchText ?? \"\"} \n                                  onChange={handleSearchTextChange} />\n                </Form.Group>\n                <Form.Select className=\"mb-3\" name=\"city\" value={formData.city} onChange={updateFormCity}>\n                    {cities.map (el => {\n                        return <option key={el.id} value={el.id}>{el.name}, {el.region}</option>\n                    })}\n                </Form.Select> */}\n                <input list='citiesSearch' type='text' name='city' onChange={handleSearchTextChange} value={searchText} />\n                <datalist id=\"citiesSearch\">\n                    {cities.map (el => {\n                        return <option key={el.id} value={el.id}>{el.name}, {el.region}</option>\n                    })}\n                </datalist>\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>How far are you willing to travel to see this artist?</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"distance\" \n                                  value={formData.distance ?? \"\"} \n                                  onChange={handleChange} />\n                </Form.Group>\n\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList data={formData} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}