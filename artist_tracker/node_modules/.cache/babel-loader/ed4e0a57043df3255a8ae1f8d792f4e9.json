{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${ArtistTrackerApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get details on an artist by name. */\n\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {\n        artistName\n      });\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get list of events for an artist */\n\n\n  static async getEventsForArtist(artistId, city, radius) {\n    try {\n      const queryData = {\n        id: artistId,\n        city,\n        radius\n      };\n      const res = await this.request(`search/events`, queryData);\n      console.log('RES');\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get details on a user by id. */\n\n\n  static async getUser(id, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const res = await this.request(`users/${id}`);\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Update user profile. */\n\n\n  static async updateUser(user, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const {\n        id,\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const updateData = {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      };\n      const res = await this.request(`users/${id}`, updateData, 'patch');\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Authenticate username/password and return token */\n\n\n  static async authenticateUser(username, password) {\n    try {\n      const res = await this.request('auth/token', {\n        username,\n        password\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      return {\n        token: res.token,\n        user: res.user\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Register new user and return token */\n\n\n  static async registerUser(user) {\n    try {\n      const {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const res = await this.request('auth/register', {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      const newUser = {\n        id: res.newUser.id,\n        username: res.newUser.username,\n        firstName: res.newUser.firstName,\n        email: res.newUser.email,\n        city: res.newUser.city,\n        distance: res.newUser.distancePref\n      };\n      return {\n        token: res.token,\n        newUser\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  static async getCitiesForAutocomplete(str) {\n    try {\n      console.log('in getCitiesForAuto...', str);\n      const res = await this.request('search/cities', {\n        city: str\n      });\n      console.log('RES IN getCitiesForAuto...', res.cities);\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  } // /** Apply to job */\n  // static async applyToJob(username, id, token) {\n  //   try {\n  //     JoblyApi.token = token;\n  //     const res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n  //     console.log(res)\n  //     return res;\n  //   } catch(err) {\n  //     console.log(err)\n  //   }\n  // }\n\n\n}\n\nexport default ArtistTrackerApi;","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","ArtistTrackerApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getArtistByName","artistName","res","log","getEventsForArtist","artistId","city","radius","queryData","id","getUser","user","updateUser","username","password","firstName","email","distancePref","updateData","authenticateUser","registerUser","newUser","distance","getCitiesForAutocomplete","str","cities"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${ArtistTrackerApi.token}` };\n    const params = (method === \"get\") ? data : {};\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on an artist by name. */\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {artistName});\n      return res;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  /** Get list of events for an artist */\n  \n  static async getEventsForArtist(artistId, city, radius) {\n    try {\n      const queryData = {id: artistId, city, radius}\n      const res = await this.request(`search/events`, queryData);\n      console.log('RES');\n      return res;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n    /** Get details on a user by id. */\n\n    static async getUser(id, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const res = await this.request(`users/${id}`);\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Update user profile. */\n\n    static async updateUser(user, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const {id, username, password, firstName, email, city, distancePref} = user;\n        const updateData = {username, password, firstName, email, city, distancePref}\n        const res = await this.request(`users/${id}`, \n                    updateData, 'patch');\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Authenticate username/password and return token */\n\n    static async authenticateUser(username, password) {\n      try {\n        const res = await this.request('auth/token', {username, password}, 'post');\n        ArtistTrackerApi.token = res.token;\n        return {token:res.token, user: res.user};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Register new user and return token */\n\n    static async registerUser(user) {\n      try {\n        const {username, password, firstName, email, city, distancePref} = user;\n        const res = await this.request('auth/register', \n                            {username, password, firstName, email, city, distancePref}, 'post');\n        ArtistTrackerApi.token = res.token;\n        const newUser = {id:res.newUser.id, username:res.newUser.username,\n            firstName: res.newUser.firstName, email: res.newUser.email, \n            city: res.newUser.city, distance: res.newUser.distancePref}\n        return {token: res.token, newUser};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    static async getCitiesForAutocomplete(str) {\n      try {\n        console.log('in getCitiesForAuto...', str)\n        const res = await this.request('search/cities', {city:str})\n        console.log('RES IN getCitiesForAuto...', res.cities);\n        return res;\n      } catch(err) {\n        console.log(err);\n      }\n    }\n\n    // /** Apply to job */\n\n    // static async applyToJob(username, id, token) {\n    //   try {\n    //     JoblyApi.token = token;\n    //     const res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n    //     console.log(res)\n    //     return res;\n    //   } catch(err) {\n    //     console.log(err)\n    //   }\n    // }\n\n}\n\nexport default ArtistTrackerApi;"]},"metadata":{},"sourceType":"module"}