{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    //console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${ArtistTrackerApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get details on an artist by name. */\n\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {\n        artistName\n      });\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get list of events for an artist */\n\n\n  static async getEventsForArtist(artistId, lat, long, radius) {\n    try {\n      const queryData = {\n        id: artistId,\n        lat,\n        long,\n        radius\n      };\n      const res = await this.request(`search/events`, queryData);\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Add an artist to a user's favorites. */\n\n\n  static async addArtistToUser(artistId, artistName, userId) {\n    try {\n      const res = await this.request(`artists/add`, {\n        artistId,\n        artistName,\n        userId\n      }, 'post');\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get details on a user by id. */\n\n\n  static async getUser(id, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const res = await this.request(`users/${id}`);\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Update user profile. */\n\n\n  static async updateUser(user, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const {\n        id,\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const updateData = {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      };\n      const res = await this.request(`users/${id}`, updateData, 'patch');\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Authenticate username/password and return token */\n\n\n  static async authenticateUser(username, password) {\n    try {\n      const res = await this.request('auth/token', {\n        username,\n        password\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      return {\n        token: res.token,\n        user: res.user\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Register new user and return token */\n\n\n  static async registerUser(user) {\n    try {\n      const {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const res = await this.request('auth/register', {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      const newUser = {\n        id: res.newUser.id,\n        username: res.newUser.username,\n        firstName: res.newUser.firstName,\n        email: res.newUser.email,\n        city: res.newUser.city,\n        distance: res.newUser.distancePref\n      };\n      return {\n        token: res.token,\n        newUser\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Returns an array of city objects to use in autocomplete. */\n\n\n  static async getCitiesForAutocomplete(str) {\n    try {\n      const res = await this.request('search/cities', {\n        city: str\n      });\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Returns an array of artist objects to use in autocomplete. */\n\n\n  static async getArtistsForAutocomplete(str) {\n    try {\n      const res = await this.request('search/artists', {\n        artist: str\n      });\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Returns array of user's favorite artists. */\n\n\n  static async getUsersArtists(userId) {\n    try {\n      const res = await this.request('artists/users', {\n        userId\n      });\n      console.log('RES', res);\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}\n\nexport default ArtistTrackerApi;","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","ArtistTrackerApi","request","endpoint","data","method","url","headers","Authorization","token","params","err","console","error","response","message","Array","isArray","getArtistByName","artistName","res","log","getEventsForArtist","artistId","lat","long","radius","queryData","id","addArtistToUser","userId","getUser","user","updateUser","username","password","firstName","email","city","distancePref","updateData","authenticateUser","registerUser","newUser","distance","getCitiesForAutocomplete","str","getArtistsForAutocomplete","artist","getUsersArtists"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    //console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${ArtistTrackerApi.token}` };\n    const params = (method === \"get\") ? data : {};\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on an artist by name. */\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {artistName});\n      return res;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  /** Get list of events for an artist */\n  \n  static async getEventsForArtist(artistId, lat, long, radius) {\n    try {\n      const queryData = {id: artistId, lat, long, radius}\n      const res = await this.request(`search/events`, queryData);\n\n      return res;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  /** Add an artist to a user's favorites. */\n  static async addArtistToUser(artistId, artistName, userId) {\n    try {\n      const res = await this.request(`artists/add`, {artistId, artistName, userId}, 'post');\n\n      return res;\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n    /** Get details on a user by id. */\n\n    static async getUser(id, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const res = await this.request(`users/${id}`);\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Update user profile. */\n\n    static async updateUser(user, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const {id, username, password, firstName, email, city, distancePref} = user;\n        const updateData = {username, password, firstName, email, city, distancePref}\n        const res = await this.request(`users/${id}`, \n                    updateData, 'patch');\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Authenticate username/password and return token */\n\n    static async authenticateUser(username, password) {\n      try {\n        const res = await this.request('auth/token', {username, password}, 'post');\n        ArtistTrackerApi.token = res.token;\n        return {token:res.token, user: res.user};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Register new user and return token */\n\n    static async registerUser(user) {\n      try {\n        const {username, password, firstName, email, city, distancePref} = user;\n        const res = await this.request('auth/register', \n                            {username, password, firstName, email, city, distancePref}, 'post');\n        ArtistTrackerApi.token = res.token;\n        const newUser = {id:res.newUser.id, username:res.newUser.username,\n            firstName: res.newUser.firstName, email: res.newUser.email, \n            city: res.newUser.city, distance: res.newUser.distancePref}\n        return {token: res.token, newUser};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Returns an array of city objects to use in autocomplete. */\n\n    static async getCitiesForAutocomplete(str) {\n      try {\n        const res = await this.request('search/cities', {city:str});\n        return res;\n      } catch(err) {\n        console.log(err);\n      }\n    }\n\n    /** Returns an array of artist objects to use in autocomplete. */\n\n    static async getArtistsForAutocomplete(str) {\n      try {\n        const res = await this.request('search/artists', {artist:str});\n\n        return res;\n      } catch(err) {\n        console.log(err);\n      }\n    }\n\n    /** Returns array of user's favorite artists. */\n\n    static async getUsersArtists(userId) {\n      try {\n        const res = await this.request('artists/users', {userId});\n        console.log('RES', res)\n\n        return res;\n      } catch(err) {\n        console.log(err);\n      }\n    }\n\n}\n\nexport default ArtistTrackerApi;"]},"metadata":{},"sourceType":"module"}