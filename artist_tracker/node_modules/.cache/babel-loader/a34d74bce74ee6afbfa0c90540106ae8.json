{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${ArtistTrackerApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  } // Individual API routes\n\n  /** Get details on an artist by name. */\n\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {\n        artistName\n      });\n      return res;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get list of events for an artist */\n\n\n  static async getEventsForArtist(artistId) {\n    try {\n      const query = title !== \"\" ? `/?title=${title}` : \"\";\n      const res = await this.request(`jobs${query}`);\n      return res.jobs;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Get details on a user by id. */\n\n\n  static async getUser(id, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const res = await this.request(`users/${id}`);\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Update user profile. */\n\n\n  static async updateUser(user, token) {\n    try {\n      ArtistTrackerApi.token = token;\n      const {\n        id,\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const updateData = {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      };\n      const res = await this.request(`users/${id}`, updateData, 'patch');\n      return res.user;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Authenticate username/password and return token */\n\n\n  static async authenticateUser(username, password) {\n    try {\n      const res = await this.request('auth/token', {\n        username,\n        password\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      return {\n        token: res.token,\n        user: res.user\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  /** Register new user and return token */\n\n\n  static async registerUser(user) {\n    try {\n      const {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      } = user;\n      const res = await this.request('auth/register', {\n        username,\n        password,\n        firstName,\n        email,\n        city,\n        distancePref\n      }, 'post');\n      ArtistTrackerApi.token = res.token;\n      const newUser = {\n        id: res.newUser.id,\n        username: res.newUser.username,\n        firstName: res.newUser.firstName,\n        email: res.newUser.email,\n        city: res.newUser.city,\n        distance: res.newUser.distancePref\n      };\n      return {\n        token: res.token,\n        newUser\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  } // /** Apply to job */\n  // static async applyToJob(username, id, token) {\n  //   try {\n  //     JoblyApi.token = token;\n  //     const res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n  //     console.log(res)\n  //     return res;\n  //   } catch(err) {\n  //     console.log(err)\n  //   }\n  // }\n\n\n}\n\nexport default ArtistTrackerApi;","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/api.js"],"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","ArtistTrackerApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getArtistByName","artistName","res","log","getEventsForArtist","artistId","query","title","jobs","getUser","id","user","updateUser","username","password","firstName","email","city","distancePref","updateData","authenticateUser","registerUser","newUser","distance"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class connects methods used to get/send to to the API.\n * \n */\n\nclass ArtistTrackerApi {\n  // token for interaction with the API is stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${ArtistTrackerApi.token}` };\n    const params = (method === \"get\") ? data : {};\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      const message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on an artist by name. */\n\n  static async getArtistByName(artistName) {\n    try {\n      const res = await this.request(`search/artists`, {artistName});\n\n      return res;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  /** Get list of events for an artist */\n  \n  static async getEventsForArtist(artistId) {\n    try {\n      const query = title !== \"\" ? `/?title=${title}`:\"\";\n      const res = await this.request(`jobs${query}`);\n      return res.jobs;\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n    /** Get details on a user by id. */\n\n    static async getUser(id, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const res = await this.request(`users/${id}`);\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Update user profile. */\n\n    static async updateUser(user, token) {\n      try {\n        ArtistTrackerApi.token = token;\n        const {id, username, password, firstName, email, city, distancePref} = user;\n        const updateData = {username, password, firstName, email, city, distancePref}\n        const res = await this.request(`users/${id}`, \n                    updateData, 'patch');\n        return res.user;\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Authenticate username/password and return token */\n\n    static async authenticateUser(username, password) {\n      try {\n        const res = await this.request('auth/token', {username, password}, 'post');\n        ArtistTrackerApi.token = res.token;\n        return {token:res.token, user: res.user};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    /** Register new user and return token */\n\n    static async registerUser(user) {\n      try {\n        const {username, password, firstName, email, city, distancePref} = user;\n        const res = await this.request('auth/register', \n                            {username, password, firstName, email, city, distancePref}, 'post');\n        ArtistTrackerApi.token = res.token;\n        const newUser = {id:res.newUser.id, username:res.newUser.username,\n            firstName: res.newUser.firstName, email: res.newUser.email, \n            city: res.newUser.city, distance: res.newUser.distancePref}\n        return {token: res.token, newUser};\n      } catch(err) {\n        console.log(err)\n      }\n    }\n\n    // /** Apply to job */\n\n    // static async applyToJob(username, id, token) {\n    //   try {\n    //     JoblyApi.token = token;\n    //     const res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n    //     console.log(res)\n    //     return res;\n    //   } catch(err) {\n    //     console.log(err)\n    //   }\n    // }\n\n}\n\nexport default ArtistTrackerApi;"]},"metadata":{},"sourceType":"module"}