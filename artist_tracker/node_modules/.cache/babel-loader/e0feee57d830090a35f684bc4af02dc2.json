{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/Profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport userContext from './userContext';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport UnauthorizedMessage from './UnauthorizedMessage';\nimport ArtistTrackerApi from './api';\nimport './Profile.css';\nimport ArtistItem from './ArtistItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst _ = require('lodash');\n\nconst {\n  debounce\n} = _;\n\nfunction Profile() {\n  _s();\n\n  var _formData$distancePre;\n\n  const {\n    id\n  } = useParams();\n  const {\n    currUser,\n    setCurrUser,\n    token,\n    usersSavedArtists\n  } = useContext(userContext);\n  const [artists, setArtists] = useState([]);\n  const [formData, setFormData] = useState({\n    username: currUser.username,\n    firstName: currUser.firstName,\n    email: currUser.email,\n    city: currUser.city,\n    distancePref: currUser.distance_pref,\n    password: ''\n  });\n  const navigate = useNavigate();\n  const [citySearch, setCitySearch] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState({\n    id: \"\",\n    name: \"\",\n    region: \"\"\n  });\n  const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n  const debounceLoadCities = useCallback(debounce(str => fetchCities(str), 1200), []);\n\n  async function fetchCities(str) {\n    try {\n      const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n      setAutocompleteCities(res.cities);\n    } catch (err) {\n      console.log(err);\n    }\n  } // change handler for city input\n\n\n  const citySearchChange = evt => {\n    setCitySearch(evt.target.value);\n\n    if (citySearch && citySearch.length >= 3) {\n      debounceLoadCities(citySearch);\n    }\n  }; // runs when user selects a city from autocomplete\n\n\n  const setCitySelection = citySelection => {\n    setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n    setSelectedCity(citySelection);\n    setCityOptionsDisplay(false);\n  }; // get user's saved artists when page loads\n\n\n  useEffect(() => {\n    setArtists(usersSavedArtists);\n  }, []); // get user's current city name, state when page loads (to show in form)\n\n  useEffect(() => {\n    async function getUserCityName() {\n      const res = await ArtistTrackerApi.getCityById(currUser.city);\n      setCitySearch(`${res.city.name}, ${res.city.region}`);\n      setSelectedCity(res.city);\n    }\n\n    getUserCityName();\n  }, []);\n\n  function handleChange(evt) {\n    const {\n      name,\n      value\n    } = evt.target;\n    setFormData(data => {\n      return { ...data,\n        [name]: value\n      };\n    });\n  }\n\n  function addArtist(evt) {\n    evt.preventDefault();\n    navigate('/addArtist');\n  }\n\n  async function handleUpdate(evt) {\n    try {\n      evt.preventDefault();\n      const user = {\n        id,\n        username: formData.username,\n        firstName: formData.firstName,\n        email: formData.email,\n        city: selectedCity.id,\n        distancePref: formData.distancePref\n      };\n      if (formData.password !== '') user.password = formData.password;\n      const updatedUser = await ArtistTrackerApi.updateUser(user, token);\n      setCurrUser(updatedUser);\n      navigate('/');\n      alert(`User updated successfully.`);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  if (!token) return /*#__PURE__*/_jsxDEV(UnauthorizedMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row py-2\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"display-5\",\n        children: currUser.firstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Profile-content row mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        className: \"Profile-form col p-4 border border-primary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-4\",\n          children: \"User Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          controlId: \"username\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"username\",\n              value: formData.username,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              name: \"password\",\n              autoComplete: \"off\",\n              value: formData.password,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          controlId: \"firstName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"firstName\",\n              value: formData.firstName,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              name: \"email\",\n              value: formData.email,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"citySearch\",\n              type: \"text\",\n              name: \"selectedCity\",\n              onClick: () => setCityOptionsDisplay(true),\n              onChange: citySearchChange,\n              value: citySearch,\n              className: \"citySearch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this), cityOptionsDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocompleteContainer ps-3 mt-1\",\n              children: autocompleteCities.map(city => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"autocompleteOption\",\n                  onClick: () => setCitySelection(city),\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [city.name, \", \", city.region]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 53\n                  }, this)\n                }, city.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          className: \"mb-3 align-items-center\",\n          controlId: \"distancePref\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 4,\n            children: \"Event search radius (miles)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 8,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              name: \"distancePref\",\n              value: (_formData$distancePre = formData.distancePref) !== null && _formData$distancePre !== void 0 ? _formData$distancePre : \"\",\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          onChange: handleChange,\n          onClick: handleUpdate,\n          children: \"Save changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col p-4 border border-primary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-4\",\n          children: \"Saved artists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Profile-artists mb-2 p-3\",\n          children: artists.length ? usersSavedArtists.map(a => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(ArtistItem, {\n              artistId: a.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 74\n            }, this)\n          }, a.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 58\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"NO ARTISTS SAVED\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"col-6 ms-auto\",\n          onClick: addArtist,\n          children: \"Add an artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outline-primary\",\n      href: \"/\",\n      className: \"mx-auto\",\n      children: \"Back to my homepage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"rvbxTl8DdLmreCaRAKtNXdkr0Xc=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/Profile.js"],"names":["React","useState","useContext","useEffect","useCallback","useNavigate","useParams","userContext","Form","Row","Col","Button","UnauthorizedMessage","ArtistTrackerApi","ArtistItem","_","require","debounce","Profile","id","currUser","setCurrUser","token","usersSavedArtists","artists","setArtists","formData","setFormData","username","firstName","email","city","distancePref","distance_pref","password","navigate","citySearch","setCitySearch","autocompleteCities","setAutocompleteCities","selectedCity","setSelectedCity","name","region","cityOptionsDisplay","setCityOptionsDisplay","debounceLoadCities","str","fetchCities","res","getCitiesForAutocomplete","cities","err","console","log","citySearchChange","evt","target","value","length","setCitySelection","citySelection","getUserCityName","getCityById","handleChange","data","addArtist","preventDefault","handleUpdate","user","updatedUser","updateUser","alert","map","a"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback} from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport userContext from './userContext';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport UnauthorizedMessage from './UnauthorizedMessage';\nimport ArtistTrackerApi from './api';\nimport './Profile.css';\nimport ArtistItem from './ArtistItem';\nconst _ = require('lodash');\nconst {debounce} = _;\n\n\nfunction Profile() {  \n    const {id} = useParams();\n    const {currUser, setCurrUser, token, usersSavedArtists} = useContext(userContext);\n    const [artists, setArtists] = useState([]);\n    const [formData, setFormData] = useState(\n                {username: currUser.username, firstName: currUser.firstName, \n                email: currUser.email, city: currUser.city, \n                distancePref: currUser.distance_pref, password: ''}\n    );\n    const navigate = useNavigate();\n\n    const [citySearch, setCitySearch] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n\n    const debounceLoadCities = useCallback(\n        debounce(str => fetchCities(str), 1200), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    // change handler for city input\n    const citySearchChange = evt => {\n        setCitySearch(evt.target.value);\n        if(citySearch && citySearch.length >= 3){\n            debounceLoadCities(citySearch);\n        }\n    }\n\n    // runs when user selects a city from autocomplete\n    const setCitySelection = (citySelection) => {\n        setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setCityOptionsDisplay(false);\n    }\n\n    // get user's saved artists when page loads\n    useEffect(() => {\n        setArtists(usersSavedArtists);\n    }, [])\n\n    // get user's current city name, state when page loads (to show in form)\n    useEffect(() => {\n        async function getUserCityName() {\n            const res = await ArtistTrackerApi.getCityById(currUser.city);\n            setCitySearch(`${res.city.name}, ${res.city.region}`); \n            setSelectedCity(res.city);\n        }\n        getUserCityName();\n    }, [])\n\n    function handleChange(evt) {\n        const {name, value} = evt.target;\n        setFormData(data => { \n            return {...data, [name]: value}\n        });\n    }\n\n    function addArtist(evt) {\n        evt.preventDefault();\n        navigate('/addArtist');\n    }\n\n    async function handleUpdate(evt) {\n        try {\n            evt.preventDefault();\n            const user = {id,\n                username: formData.username, \n                firstName: formData.firstName, \n                email: formData.email, \n                city: selectedCity.id, \n                distancePref: formData.distancePref}\n            if (formData.password !== '') user.password = formData.password;\n\n          const updatedUser = await ArtistTrackerApi.updateUser(user, token);\n          setCurrUser(updatedUser);\n          navigate('/');\n          alert(`User updated successfully.`)\n        } catch(err) {\n          console.log(err);\n        }\n      }\n\n    if (!token) return <UnauthorizedMessage />;\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row py-2\">\n                <p className='display-5'>{currUser.firstName}</p>\n            </div>\n            <div className=\"Profile-content row mb-3\">\n                <Form className=\"Profile-form col p-4 border border-primary\">\n                    <h3 className=\"mb-4\">User Info</h3>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"username\">\n                        <Form.Label column sm={4}>Username</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"text\"\n                                        name=\"username\" \n                                        value={formData.username}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"password\">\n                        <Form.Label column sm={4}>Password</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"password\"\n                                        name=\"password\" \n                                        autoComplete='off'\n                                        value={formData.password}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"firstName\">\n                        <Form.Label column sm={4}>First Name</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"text\"\n                                        name=\"firstName\" \n                                        value={formData.firstName}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"email\">\n                        <Form.Label column sm={4}>Email</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"email\"\n                                        name=\"email\" \n                                        value={formData.email}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3\">\n                            <Form.Label column sm={4}>City:</Form.Label>\n                            <Col sm={8}>\n                                <Form.Control id='citySearch' \n                                            type='text' \n                                            name='selectedCity' \n                                            onClick={() => setCityOptionsDisplay(true)}\n                                            onChange={citySearchChange} \n                                            value={citySearch}\n                                            className='citySearch'/>\n                                {cityOptionsDisplay && (\n                                    <div className='autocompleteContainer ps-3 mt-1'>\n                                        {autocompleteCities.map(city => {\n                                            return (\n                                                <div className='autocompleteOption' \n                                                    key={city.id} \n                                                    onClick={() => setCitySelection(city)}>\n                                                    <span>{city.name}, {city.region}</span>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                )}\n                            </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-3 align-items-center\" controlId=\"distancePref\">\n                        <Form.Label column sm={4}>Event search radius (miles)</Form.Label>\n                        <Col sm={8}>\n                            <Form.Control type=\"number\"\n                                        name=\"distancePref\" \n                                        value={formData.distancePref ?? \"\"}\n                                        onChange={handleChange} />\n                        </Col>\n                    </Form.Group>\n                    <Button type=\"submit\" onChange={handleChange} onClick={handleUpdate}>\n                        Save changes\n                    </Button>\n                </Form>\n                <div className=\"col p-4 border border-primary\">\n                    <h3 className=\"mb-4\">Saved artists</h3>\n                    <div className='Profile-artists mb-2 p-3'>\n                        {(artists.length)\n                            ? usersSavedArtists.map(a => <div key={a.id}><ArtistItem artistId={a.id} /></div>)\n                            : <p>NO ARTISTS SAVED</p>\n                        }\n                    </div>\n                    \n                    <Button variant=\"primary\" \n                            className=\"col-6 ms-auto\"\n                            onClick={addArtist}>Add an artist</Button>\n                        \n                </div>\n                \n\n                \n            </div> \n            {/* ^ end content row */}\n            <Button variant=\"outline-primary\" href=\"/\" className=\"mx-auto\">Back to my homepage</Button>\n        </div>\n    )\n}\n\nexport default Profile;"]},"metadata":{},"sourceType":"module"}