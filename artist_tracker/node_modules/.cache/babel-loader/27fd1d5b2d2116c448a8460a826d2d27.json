{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst _ = require('lodash');\n\nconst {\n  debounce\n} = _;\n\nfunction GuestForm() {\n  _s();\n\n  const [citySearch, setCitySearch] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState({\n    id: \"\",\n    name: \"\",\n    region: \"\"\n  });\n  const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n  const [artistSearch, setArtistSearch] = useState(\"\");\n  const [autocompleteArtists, setAutocompleteArtists] = useState([]);\n  const [selectedArtist, setSelectedArtist] = useState({\n    name: \"\"\n  });\n  const [artistOptionsDisplay, setArtistOptionsDisplay] = useState(false);\n  const [radius, setRadius] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const debounceLoadCities = useCallback(debounce(str => fetchCities(str), 1000), []);\n  const debounceLoadArtists = useCallback(debounce(str => fetchArtists(str), 1000), []);\n\n  async function fetchCities(str) {\n    try {\n      const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n      setAutocompleteCities(res.cities);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function fetchArtists(str) {\n    try {\n      const res = await ArtistTrackerApi.getArtistsForAutocomplete(str);\n      console.log('res.artist', res.artist);\n      setAutocompleteArtists(res.artist);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const artistSearchChange = evt => {\n    setArtistSearch(evt.target.value);\n\n    if (artistSearch && artistSearch.length >= 3) {\n      debounceLoadArtists(artistSearch);\n    }\n  };\n\n  const citySearchChange = evt => {\n    setCitySearch(evt.target.value);\n\n    if (citySearch && citySearch.length >= 3) {\n      debounceLoadCities(citySearch);\n    }\n  };\n\n  const radiusChange = evt => {\n    setRadius(evt.target.value);\n  };\n\n  const setCitySelection = citySelection => {\n    setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n    setSelectedCity(citySelection);\n    setCityOptionsDisplay(false);\n  };\n\n  const setArtistSelection = artistSelection => {\n    setArtistSearch(artistSelection.name);\n    setSelectedArtist(artistSelection);\n    setArtistOptionsDisplay(false);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSubmitted(true);\n  };\n\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"artistSearch\",\n          type: \"text\",\n          name: \"selectedArtist\",\n          onClick: () => setArtistOptionsDisplay(!artistOptionsDisplay),\n          onChange: artistSearchChange,\n          value: artistSearch,\n          className: \"artistSearch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), artistOptionsDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocompleteContainer ps-3 mt-1\",\n          children: autocompleteArtists.map(artist => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocompleteOption\",\n              onClick: () => setArtistSelection(artist),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: artist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 41\n              }, this)\n            }, artist.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Enter a city:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"citySearch\",\n          type: \"text\",\n          name: \"selectedCity\",\n          onClick: () => setCityOptionsDisplay(!cityOptionsDisplay),\n          onChange: citySearchChange,\n          value: citySearch,\n          className: \"citySearch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), cityOptionsDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autocompleteContainer ps-3 mt-1\",\n          children: autocompleteCities.map(city => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocompleteOption\",\n              onClick: () => setCitySelection(city),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [city.name, \", \", city.region]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 41\n              }, this)\n            }, city.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Search radius\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"radius\",\n          value: radius !== null && radius !== void 0 ? radius : \"\",\n          onChange: radiusChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      artistInfo: selectedArtist,\n      cityInfo: selectedCity,\n      radius: radius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"Qjm8BK017R44UhKOJdojyWttS6o=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","useCallback","Form","Button","EventList","ArtistTrackerApi","_","require","debounce","GuestForm","citySearch","setCitySearch","autocompleteCities","setAutocompleteCities","selectedCity","setSelectedCity","id","name","region","cityOptionsDisplay","setCityOptionsDisplay","artistSearch","setArtistSearch","autocompleteArtists","setAutocompleteArtists","selectedArtist","setSelectedArtist","artistOptionsDisplay","setArtistOptionsDisplay","radius","setRadius","submitted","setSubmitted","debounceLoadCities","str","fetchCities","debounceLoadArtists","fetchArtists","res","getCitiesForAutocomplete","cities","err","console","log","getArtistsForAutocomplete","artist","artistSearchChange","evt","target","value","length","citySearchChange","radiusChange","setCitySelection","citySelection","setArtistSelection","artistSelection","handleSubmit","preventDefault","map","city"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction GuestForm() {\n    const [citySearch, setCitySearch] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [cityOptionsDisplay, setCityOptionsDisplay] = useState(false);\n\n    const [artistSearch, setArtistSearch] = useState(\"\");\n    const [autocompleteArtists, setAutocompleteArtists] = useState([]);\n    const [selectedArtist, setSelectedArtist] = useState({name:\"\"});\n    const [artistOptionsDisplay, setArtistOptionsDisplay] = useState(false);\n\n    const [radius, setRadius] = useState(null);\n    const [submitted, setSubmitted] = useState(false);\n\n    const debounceLoadCities = useCallback(\n                                debounce(str => fetchCities(str), 1000), []);\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 1000), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function fetchArtists(str) {\n        try {\n            const res = await ArtistTrackerApi.getArtistsForAutocomplete(str);\n            console.log('res.artist', res.artist)\n            setAutocompleteArtists(res.artist);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const artistSearchChange = evt => {\n        setArtistSearch(evt.target.value);\n        if(artistSearch && artistSearch.length >= 3){\n            debounceLoadArtists(artistSearch);\n        }\n    }\n\n    const citySearchChange = evt => {\n        setCitySearch(evt.target.value);\n        if(citySearch && citySearch.length >= 3){\n            debounceLoadCities(citySearch);\n        }\n    }\n\n    const radiusChange = evt => {\n        setRadius(evt.target.value);\n    }\n\n    const setCitySelection = (citySelection) => {\n        setCitySearch(`${citySelection.name}, ${citySelection.region}`);\n        setSelectedCity(citySelection);\n        setCityOptionsDisplay(false);\n    }\n\n    const setArtistSelection = (artistSelection) => {\n        setArtistSearch(artistSelection.name);\n        setSelectedArtist(artistSelection);\n        setArtistOptionsDisplay(false);\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        setSubmitted(true);\n    }\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control id='artistSearch' \n                                type='text' \n                                name='selectedArtist' \n                                onClick={() => setArtistOptionsDisplay(!artistOptionsDisplay)}\n                                onChange={artistSearchChange} \n                                value={artistSearch} \n                                className='artistSearch'/>\n                    {artistOptionsDisplay && (\n                        <div className='autocompleteContainer ps-3 mt-1'>\n                            {autocompleteArtists.map(artist => {\n                                return (\n                                    <div className='autocompleteOption' \n                                        key={artist.id} \n                                        onClick={() => setArtistSelection(artist)}>\n                                        <span>{artist.name}</span>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                    )}\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Enter a city:</Form.Label>\n                    <Form.Control id='citySearch' \n                                  type='text' \n                                  name='selectedCity' \n                                  onClick={() => setCityOptionsDisplay(!cityOptionsDisplay)}\n                                  onChange={citySearchChange} \n                                  value={citySearch} \n                                  className='citySearch'/>\n                    {cityOptionsDisplay && (\n                        <div className='autocompleteContainer ps-3 mt-1'>\n                            {autocompleteCities.map(city => {\n                                return (\n                                    <div className='autocompleteOption' \n                                        key={city.id} \n                                        onClick={() => setCitySelection(city)}>\n                                        <span>{city.name}, {city.region}</span>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                    )}\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>Search radius</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"radius\" \n                                  value={radius ?? \"\"} \n                                  onChange={radiusChange} />\n                </Form.Group>\n\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList artistInfo={selectedArtist} cityInfo={selectedCity} radius={radius} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}