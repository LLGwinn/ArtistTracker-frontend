{"ast":null,"code":"var _jsxFileName = \"/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst _ = require('lodash');\n\nconst {\n  debounce\n} = _;\n\nfunction GuestForm() {\n  _s();\n\n  const [submitted, setSubmitted] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const [autocompleteCities, setAutocompleteCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState({\n    id: \"\",\n    name: \"\",\n    region: \"\"\n  });\n  const [selectedArtist, setSelectedArtist] = useState(null);\n  const [radius, setRadius] = useState(50);\n  const debounceLoadCities = useCallback(debounce(str => fetchCities(str), 1000), []);\n  const debounceLoadArtists = useCallback(debounce(str => fetchArtists(str), 1000), []);\n\n  async function fetchCities(str) {\n    try {\n      const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n      setAutocompleteCities(res.cities);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function fetchArtists(str) {\n    try {\n      console.log('fetchArtists function running');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const artistSearchChange = evt => {\n    setSearchText(evt.target.value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadArtists(searchText);\n    }\n  };\n\n  const citySearchTextChange = evt => {\n    const {\n      name,\n      value\n    } = evt.target;\n    setSearchText(value);\n\n    if (searchText && searchText.length >= 4) {\n      debounceLoadCities(searchText);\n    }\n\n    setSelectedCity(data => {\n      return { ...data,\n        [name]: value\n      };\n    });\n  };\n\n  const radiusChange = evt => {\n    setRadius(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSubmitted(true);\n  };\n\n  return submitted === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"GuestForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formArtist\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Which artist would you like to see?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          name: \"selectedArtist\",\n          value: selectedArtist !== null && selectedArtist !== void 0 ? selectedArtist : \"\",\n          onChange: artistSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        list: \"cityChoices\",\n        type: \"text\",\n        name: \"selectedCity\",\n        onChange: citySearchTextChange,\n        value: selectedCity !== null && selectedCity !== void 0 ? selectedCity : searchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"cityChoices\",\n        children: autocompleteCities.map(el => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: el.id,\n            children: [el.name, \", \", el.region]\n          }, el.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formDistance\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Search radius\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          name: \"radius\",\n          value: radius !== null && radius !== void 0 ? radius : \"\",\n          onChange: radiusChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Find my artist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      artistInfo: selectedArtist,\n      cityInfo: selectedCity,\n      radius: radius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GuestForm, \"j/T4klkJNWF8dAq5Tf6fohU5ro8=\");\n\n_c = GuestForm;\nexport default GuestForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GuestForm\");","map":{"version":3,"sources":["/home/ells/Bootcamp/Capstone-2/frontend/artist_tracker/src/GuestForm.js"],"names":["React","useEffect","useState","useCallback","Form","Button","EventList","ArtistTrackerApi","_","require","debounce","GuestForm","submitted","setSubmitted","searchText","setSearchText","autocompleteCities","setAutocompleteCities","selectedCity","setSelectedCity","id","name","region","selectedArtist","setSelectedArtist","radius","setRadius","debounceLoadCities","str","fetchCities","debounceLoadArtists","fetchArtists","res","getCitiesForAutocomplete","cities","err","console","log","artistSearchChange","evt","target","value","length","citySearchTextChange","data","radiusChange","handleSubmit","preventDefault","map","el"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './GuestForm.css';\nimport EventList from './EventList';\nimport ArtistTrackerApi from './api';\nconst _ = require('lodash');\nconst {debounce} = _;\n\nfunction GuestForm() {\n    const [submitted, setSubmitted] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [autocompleteCities, setAutocompleteCities] = useState([]);\n    const [selectedCity, setSelectedCity] = useState({id:\"\", name:\"\", region:\"\"});\n    const [selectedArtist, setSelectedArtist] = useState(null);\n    const [radius, setRadius] = useState(50);\n\n    const debounceLoadCities = useCallback(\n                                debounce(str => fetchCities(str), 1000), []);\n\n    const debounceLoadArtists = useCallback(\n        debounce(str => fetchArtists(str), 1000), []);\n\n    async function fetchCities(str) {\n        try {\n            const res = await ArtistTrackerApi.getCitiesForAutocomplete(str);\n            setAutocompleteCities(res.cities);\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    async function fetchArtists(str) {\n        try {\n            console.log('fetchArtists function running')\n        } catch(err) {\n            console.log(err);\n        }  \n    }\n\n    const artistSearchChange = evt => {\n        setSearchText(evt.target.value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadArtists(searchText);\n        }\n    }\n\n    const citySearchTextChange = evt => {\n        const {name, value} = evt.target;\n        setSearchText(value);\n        if(searchText && searchText.length >= 4){\n            debounceLoadCities(searchText);\n        }\n        setSelectedCity(data => { return {...data, [name]:value} });\n    }\n\n    const radiusChange = evt => {\n        setRadius(evt.target.value);\n    }\n\n    const handleSubmit = evt => {\n        evt.preventDefault();\n        setSubmitted(true);\n    }\n\n    return (\n        (submitted === false)\n        ?\n        <>\n            <Form className=\"GuestForm\" onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formArtist\">\n                    <Form.Label>Which artist would you like to see?</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"selectedArtist\" \n                                  value={selectedArtist ?? \"\"} \n                                  onChange={artistSearchChange} />\n                </Form.Group>\n                {/* <Form.Group className=\"mb-3\" controlId=\"formSearchText\">\n                    <Form.Label>Enter your city:</Form.Label>\n                    <Form.Control type=\"text\"\n                                  name=\"searchText\" \n                                  value={searchText ?? \"\"} \n                                  onChange={handleSearchTextChange} />\n                </Form.Group>\n                <Form.Select className=\"mb-3\" name=\"city\" value={formData.city} onChange={updateFormCity}>\n                    {cities.map (el => {\n                        return <option key={el.id} value={el.id}>{el.name}, {el.region}</option>\n                    })}\n                </Form.Select> */}\n                <input list='cityChoices' type='text' name='selectedCity' onChange={citySearchTextChange} value={selectedCity ?? searchText} />\n                <datalist id=\"cityChoices\">\n                    {autocompleteCities.map (el => {\n                        return <option key={el.id} value={el.id}>{el.name}, {el.region}</option>\n                    })}\n                </datalist>\n                <Form.Group className=\"mb-3\" controlId=\"formDistance\">\n                    <Form.Label>Search radius</Form.Label>\n                    <Form.Control type=\"number\"\n                                  name=\"radius\" \n                                  value={radius ?? \"\"} \n                                  onChange={radiusChange} />\n                </Form.Group>\n\n                <Button type=\"submit\">Find my artist!</Button>\n            </Form>\n        </>\n        :\n        <>\n            <EventList artistInfo={selectedArtist} cityInfo={selectedCity} radius={radius} />\n        </>\n    )\n}\n\nexport default GuestForm;\n\n\n\n"]},"metadata":{},"sourceType":"module"}